"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[722],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var i=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=i.createContext({}),l=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return i.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef(function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(n),g=o,d=c["".concat(u,".").concat(g)]||c[g]||p[g]||r;return n?i.createElement(d,a(a({ref:t},m),{},{components:n})):i.createElement(d,a({ref:t},m))});function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(8168),o=(n(6540),n(5680));const r={sidebar_position:400},a="Usage",s={unversionedId:"usage",id:"usage",title:"Usage",description:"github-comment post",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/github-comment/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/github-comment/getting-started"},next:{title:"Configuration",permalink:"/github-comment/config"}},u={},l=[{value:"github-comment post",id:"github-comment-post",level:2},{value:"github-comment exec",id:"github-comment-exec",level:2},{value:"github-comment init",id:"github-comment-init",level:2},{value:"github-comment hide",id:"github-comment-hide",level:2}],m={toc:l},c="wrapper";function p({components:e,...t}){return(0,o.yg)(c,(0,i.A)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"usage"},"Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment --help\nNAME:\n   github-comment - post a comment to GitHub\n\nUSAGE:\n   github-comment [global options] [command [command options]]\n\nVERSION:\n   6.3.4 (6b8a9e9f99bd861e2be5f1490ce2c3be7afa300c)\n\nCOMMANDS:\n   post     post a comment\n   exec     execute a command and post the result as a comment\n   init     scaffold a configuration file if it doesn't exist\n   hide     hide issue or pull request comments\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --log-level string  log level [$GH_COMMENT_LOG_LEVEL]\n   --help, -h          show help\n   --version, -v       print the version\n")),(0,o.yg)("h2",{id:"github-comment-post"},"github-comment post"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment post --help\nNAME:\n   github-comment post - post a comment\n\nUSAGE:\n   github-comment post\n\nOPTIONS:\n   --org string                             GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo string                            GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token string                           GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 string                            commit sha1 [$GH_COMMENT_SHA1]\n   --template string                        comment template\n   --template-key string, -k string         comment template key (default: "default")\n   --config string                          configuration file path [$GH_COMMENT_CONFIG]\n   --pr int                                 GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --var string [ --var string ]            template variable\n   --var-file string [ --var-file string ]  template variable name and file path\n   --dry-run                                output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                      works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                             suppress the output of dry-run and skip-no-token (default: false)\n   --stdin-template                         read standard input as the template (default: false)\n   --update-condition string, -u string     update the comment that matches with the condition\n   --help, -h                               show help\n')),(0,o.yg)("h2",{id:"github-comment-exec"},"github-comment exec"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment exec --help\nNAME:\n   github-comment exec - execute a command and post the result as a comment\n\nUSAGE:\n   github-comment exec\n\nOPTIONS:\n   --org string                             GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo string                            GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token string                           GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 string                            commit sha1 [$GH_COMMENT_SHA1]\n   --template string                        comment template\n   --template-key string, -k string         comment template key (default: "default")\n   --config string                          configuration file path [$GH_COMMENT_CONFIG]\n   --pr int                                 GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --out string [ --out string ]            output destination\n   --var string [ --var string ]            template variable\n   --var-file string [ --var-file string ]  template variable name and file path\n   --dry-run                                output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                      works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                             suppress the output of dry-run and skip-no-token (default: false)\n   --help, -h                               show help\n')),(0,o.yg)("h2",{id:"github-comment-init"},"github-comment init"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment init --help\nNAME:\n   github-comment init - scaffold a configuration file if it doesn't exist\n\nUSAGE:\n   github-comment init\n\nOPTIONS:\n   --help, -h  show help\n")),(0,o.yg)("h2",{id:"github-comment-hide"},"github-comment hide"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment hide --help\nNAME:\n   github-comment hide - hide issue or pull request comments\n\nUSAGE:\n   github-comment hide\n\nOPTIONS:\n   --org string                             GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo string                            GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token string                           GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --config string                          configuration file path [$GH_COMMENT_CONFIG]\n   --condition string                       hide condition\n   --hide-key string, -k string             hide condition key (default: "default")\n   --pr int                                 GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --sha1 string                            commit sha1\n   --var string [ --var string ]            template variable\n   --var-file string [ --var-file string ]  template variable name and file path\n   --dry-run                                output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                      works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                             suppress the output of dry-run and skip-no-token (default: false)\n   --help, -h                               show help\n')))}p.isMDXComponent=!0}}]);