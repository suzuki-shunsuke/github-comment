"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[614],{3056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var o=n(8168),a=(n(6540),n(5680));const r={sidebar_position:700},i="Feature",s={unversionedId:"feature",id:"feature",title:"Feature",description:"post command supports standard input to pass a template",source:"@site/docs/feature.md",sourceDirName:".",slug:"/feature",permalink:"/github-comment/feature",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/feature.md",tags:[],version:"current",sidebarPosition:700,frontMatter:{sidebar_position:700},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/github-comment/config"},next:{title:"Complement",permalink:"/github-comment/complement"}},p={},m=[{value:"post command supports standard input to pass a template",id:"post-command-supports-standard-input-to-pass-a-template",level:2},{value:"post a substitute comment when it failed to post a too long comment",id:"post-a-substitute-comment-when-it-failed-to-post-a-too-long-comment",level:2},{value:"skip-no-token",id:"skip-no-token",level:2},{value:"Skip to send a comment with Environment variable",id:"skip-to-send-a-comment-with-environment-variable",level:2}],u={toc:m},l="wrapper";function c(e){let{components:t,...n}=e;return(0,a.yg)(l,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"feature"},"Feature"),(0,a.yg)("h2",{id:"post-command-supports-standard-input-to-pass-a-template"},"post command supports standard input to pass a template"),(0,a.yg)("p",null,"Instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"-template"),", you can pass a template from a standard input with ",(0,a.yg)("inlineCode",{parentName:"p"},"-stdin-template"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"$ echo hello | github-comment post -stdin-template\n")),(0,a.yg)("h2",{id:"post-a-substitute-comment-when-it-failed-to-post-a-too-long-comment"},"post a substitute comment when it failed to post a too long comment"),(0,a.yg)("p",null,"When the comment is too long, it failed to post a comment due to GitHub API's validation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Validation Failed",\n  "errors": [\n    {\n      "resource": "IssueComment",\n      "code": "unprocessable",\n      "field": "data",\n      "message": "Body is too long (maximum is 65536 characters)"\n    }\n  ],\n  "documentation_url": "https://docs.github.com/rest/reference/issues#create-an-issue-comment"\n}\n')),(0,a.yg)("p",null,"If a comment includes the long command standard output, you may encounter the error."),(0,a.yg)("p",null,"github-comment supports to post a substitute comment in that case."),(0,a.yg)("p",null,"When it failed to post a comment of ",(0,a.yg)("inlineCode",{parentName:"p"},"template"),", github-comment posts a comment of ",(0,a.yg)("inlineCode",{parentName:"p"},"template_for_too_long")," instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"template"),"."),(0,a.yg)("p",null,"e.g."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"post:\n  hello:\n    template: too long comment\n    template_for_too_long: comment is too long\nexec:\n  hello:\n    - when: ExitCode != 0\n      template: |\n        exit code: {{.ExitCode}}\n        combined output: {{.CombinedOutput}}\n      template_for_too_long: |\n        comment is too long so the command output is omitted\n        exit code: {{.ExitCode}}\n")),(0,a.yg)("h2",{id:"skip-no-token"},"skip-no-token"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/github-comment/issues/115"},"https://github.com/suzuki-shunsuke/github-comment/issues/115")),(0,a.yg)("p",null,"In some situation, the GitHub Access Token isn't exposed to the environment variable for the security."),(0,a.yg)("p",null,"For example, on Drone Secrets are not exposed to pull requests by default."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.drone.io/secret/repository/"},"https://docs.drone.io/secret/repository/")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Secrets are not exposed to pull requests by default.\nThis prevents a bad actor from sending a pull request and attempting to expose your secrets.")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"github-comment")," requires the GitHub Access Token, so it fails to run ",(0,a.yg)("inlineCode",{parentName:"p"},"github-comment post")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"github-comment exec"),"."),(0,a.yg)("p",null,"You can avoid the error by the command line option ",(0,a.yg)("inlineCode",{parentName:"p"},"--skip-no-token")," or the configuration ",(0,a.yg)("inlineCode",{parentName:"p"},"skip_no_token: true"),".\nIf the GitHub Access Token is set, this option is ignored.\nIf the GitHub Access Token isn't set, this option works like ",(0,a.yg)("inlineCode",{parentName:"p"},"--dry-run"),"."),(0,a.yg)("h2",{id:"skip-to-send-a-comment-with-environment-variable"},"Skip to send a comment with Environment variable"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/github-comment/issues/143"},"https://github.com/suzuki-shunsuke/github-comment/issues/143")),(0,a.yg)("p",null,"When you try to run shell scripts for CI on local for testing, in many case you don't want to send a comment.\nSo github-comment supports to skip to send a comment with an environment variable."),(0,a.yg)("p",null,"Set the environment variable ",(0,a.yg)("inlineCode",{parentName:"p"},"GITHUB_COMMENT_SKIP")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"$ export GITHUB_COMMENT_SKIP=true\n$ github-comment post -template test # Do nothing\n$ github-comment exec -- echo hello # a command is run but a comment isn't sent\nhello\n")))}c.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var o=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),m=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return o.createElement(p.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=m(n),d=a,g=l["".concat(p,".").concat(d)]||l[d]||c[d]||r;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<r;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);