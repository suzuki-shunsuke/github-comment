"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[722],{5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>h});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=m(n),d=o,h=c["".concat(l,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[c]="string"==typeof e?e:o,r[1]=u;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var a=n(8168),o=(n(6540),n(5680));const i={sidebar_position:400},r="Usage",u={unversionedId:"usage",id:"usage",title:"Usage",description:"github-comment post",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/github-comment/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/github-comment/getting-started"},next:{title:"Configuration",permalink:"/github-comment/config"}},l={},m=[{value:"github-comment post",id:"github-comment-post",level:2},{value:"github-comment exec",id:"github-comment-exec",level:2},{value:"github-comment init",id:"github-comment-init",level:2},{value:"github-comment hide",id:"github-comment-hide",level:2}],s={toc:m},c="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,a.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"usage"},"Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment --help\nNAME:\n   github-comment - post a comment to GitHub\n\nUSAGE:\n   github-comment [global options] command [command options]\n\nVERSION:\n   6.3.2 (92bf17c5b20fb7a1246372b0cc9de4b850d50b4b)\n\nCOMMANDS:\n   post     post a comment\n   exec     execute a command and post the result as a comment\n   init     scaffold a configuration file if it doesn't exist\n   hide     hide issue or pull request comments\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --log-level value  log level [$GH_COMMENT_LOG_LEVEL]\n   --help, -h         show help\n   --version, -v      print the version\n")),(0,o.yg)("h2",{id:"github-comment-post"},"github-comment post"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment post --help\nNAME:\n   github-comment post - post a comment\n\nUSAGE:\n   github-comment post [command options]\n\nOPTIONS:\n   --org value                            GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo value                           GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token value                          GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 value                           commit sha1 [$GH_COMMENT_SHA1]\n   --template value                       comment template\n   --template-key value, -k value         comment template key (default: "default")\n   --config value                         configuration file path [$GH_COMMENT_CONFIG]\n   --pr value                             GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --var value [ --var value ]            template variable\n   --var-file value [ --var-file value ]  template variable name and file path\n   --dry-run                              output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                    works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                           suppress the output of dry-run and skip-no-token (default: false)\n   --stdin-template                       read standard input as the template (default: false)\n   --update-condition value, -u value     update the comment that matches with the condition\n   --help, -h                             show help\n')),(0,o.yg)("h2",{id:"github-comment-exec"},"github-comment exec"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment exec --help\nNAME:\n   github-comment exec - execute a command and post the result as a comment\n\nUSAGE:\n   github-comment exec [command options]\n\nOPTIONS:\n   --org value                            GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo value                           GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token value                          GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 value                           commit sha1 [$GH_COMMENT_SHA1]\n   --template value                       comment template\n   --template-key value, -k value         comment template key (default: "default")\n   --config value                         configuration file path [$GH_COMMENT_CONFIG]\n   --pr value                             GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --out value [ --out value ]            output destination\n   --var value [ --var value ]            template variable\n   --var-file value [ --var-file value ]  template variable name and file path\n   --dry-run                              output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                    works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                           suppress the output of dry-run and skip-no-token (default: false)\n   --help, -h                             show help\n')),(0,o.yg)("h2",{id:"github-comment-init"},"github-comment init"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment init --help\nNAME:\n   github-comment init - scaffold a configuration file if it doesn't exist\n\nUSAGE:\n   github-comment init [command options]\n\nOPTIONS:\n   --help, -h  show help\n")),(0,o.yg)("h2",{id:"github-comment-hide"},"github-comment hide"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment hide --help\nNAME:\n   github-comment hide - hide issue or pull request comments\n\nUSAGE:\n   github-comment hide [command options]\n\nOPTIONS:\n   --org value                            GitHub organization name [$GH_COMMENT_REPO_ORG]\n   --repo value                           GitHub repository name [$GH_COMMENT_REPO_NAME]\n   --token value                          GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --config value                         configuration file path [$GH_COMMENT_CONFIG]\n   --condition value                      hide condition\n   --hide-key value, -k value             hide condition key (default: "default")\n   --pr value                             GitHub pull request number (default: 0) [$GH_COMMENT_PR_NUMBER]\n   --sha1 value                           commit sha1\n   --var value [ --var value ]            template variable\n   --var-file value [ --var-file value ]  template variable name and file path\n   --dry-run                              output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n                    works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GH_COMMENT_SKIP_NO_TOKEN, $GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                           suppress the output of dry-run and skip-no-token (default: false)\n   --help, -h                             show help\n')))}p.isMDXComponent=!0}}]);