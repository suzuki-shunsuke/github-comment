"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[722],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>f});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||c[d]||r;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>s});var a=n(8168),o=(n(6540),n(5680));const r={sidebar_position:400},i="Usage",u={unversionedId:"usage",id:"usage",title:"Usage",description:"post",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/github-comment/usage",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/usage.md",tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/github-comment/getting-started"},next:{title:"Configuration",permalink:"/github-comment/config"}},l={},s=[{value:"post",id:"post",level:2},{value:"exec",id:"exec",level:2},{value:"hide",id:"hide",level:2}],m={toc:s},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"usage"},"Usage"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment help\nNAME:\n   github-comment - post a comment to GitHub\n\nUSAGE:\n   github-comment [global options] command [command options] [arguments...]\n\nVERSION:\n   3.1.0\n\nCOMMANDS:\n   post     post a comment\n   exec     execute a command and post the result as a comment\n   init     scaffold a configuration file if it doesn't exist\n   hide     hide issue or pull request comments\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --log-level value  log level [$GITHUB_COMMENT_LOG_LEVEL]\n   --help, -h         show help (default: false)\n   --version, -v      print the version (default: false)\n")),(0,o.yg)("h2",{id:"post"},"post"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment help post\nNAME:\n   github-comment post - post a comment\n\nUSAGE:\n   github-comment post [command options] [arguments...]\n\nOPTIONS:\n   --org value                     GitHub organization name\n   --repo value                    GitHub repository name\n   --token value                   GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 value                    commit sha1\n   --template value                comment template\n   --template-key value, -k value  comment template key (default: "default")\n   --config value                  configuration file path\n   --pr value                      GitHub pull request number (default: 0)\n   --var value                     template variable\n   --var-file value                template variable name and file path\n   --dry-run                       output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n             works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                    suppress the output of dry-run and skip-no-token (default: false)\n   --stdin-template                read standard input as the template (default: false)\n')),(0,o.yg)("h2",{id:"exec"},"exec"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment help exec\nNAME:\n   github-comment exec - execute a command and post the result as a comment\n\nUSAGE:\n   github-comment exec [command options] [arguments...]\n\nOPTIONS:\n   --org value                     GitHub organization name\n   --repo value                    GitHub repository name\n   --token value                   GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --sha1 value                    commit sha1\n   --template value                comment template\n   --template-key value, -k value  comment template key (default: "default")\n   --config value                  configuration file path\n   --pr value                      GitHub pull request number (default: 0)\n   --var value                     template variable\n   --var-file value                template variable name and file path\n   --dry-run                       output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n             works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                    suppress the output of dry-run and skip-no-token (default: false)\n')),(0,o.yg)("h2",{id:"hide"},"hide"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ github-comment help hide\nNAME:\n   github-comment hide - hide issue or pull request comments\n\nUSAGE:\n   github-comment hide [command options] [arguments...]\n\nOPTIONS:\n   --org value                 GitHub organization name\n   --repo value                GitHub repository name\n   --token value               GitHub API token [$GITHUB_TOKEN, $GITHUB_ACCESS_TOKEN]\n   --config value              configuration file path\n   --condition value           hide condition\n   --hide-key value, -k value  hide condition key (default: "default")\n   --pr value                  GitHub pull request number (default: 0)\n   --sha1 value                commit sha1\n   --var value                 template variable\n   --dry-run                   output a comment to standard error output instead of posting to GitHub (default: false)\n   --skip-no-token, -n         works like dry-run if the GitHub Access Token isn\'t set (default: false) [$GITHUB_COMMENT_SKIP_NO_TOKEN]\n   --silent, -s                suppress the output of dry-run and skip-no-token (default: false)\n')))}c.isMDXComponent=!0}}]);