"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[446],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,h=c["".concat(p,".").concat(d)]||c[d]||s[d]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:500},o="Configuration",l={unversionedId:"config",id:"config",title:"Configuration",description:"Configuration file path",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/github-comment/config",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/config.md",tags:[],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/github-comment/usage"},next:{title:"Feature",permalink:"/github-comment/feature"}},p={},m=[{value:"Configuration file path",id:"configuration-file-path",level:2},{value:"post: variables which can be used in template",id:"post-variables-which-can-be-used-in-template",level:2},{value:"exec",id:"exec",level:2},{value:"Define reusable template components",id:"define-reusable-template-components",level:2},{value:"Define variables",id:"define-variables",level:2}],u={toc:m},c="wrapper";function s(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration"},"Configuration"),(0,i.kt)("h2",{id:"configuration-file-path"},"Configuration file path"),(0,i.kt)("p",null,"The configuration file path can be specified with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--config (-c)")," option.\nIf the confgiuration file path isn't specified, the file named ",(0,i.kt)("inlineCode",{parentName:"p"},"^\\.?github-comment\\.ya?ml$")," would be searched from the current directory to the root directory."),(0,i.kt)("h2",{id:"post-variables-which-can-be-used-in-template"},"post: variables which can be used in template"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Org"),(0,i.kt)("li",{parentName:"ul"},"Repo"),(0,i.kt)("li",{parentName:"ul"},"PRNumber"),(0,i.kt)("li",{parentName:"ul"},"SHA1"),(0,i.kt)("li",{parentName:"ul"},"TemplateKey"),(0,i.kt)("li",{parentName:"ul"},"Vars"),(0,i.kt)("li",{parentName:"ul"},"AvoidHTMLEscape: the function to post a comment without HTML escape by ",(0,i.kt)("a",{parentName:"li",href:"https://golang.org/pkg/html/template/"},"Go's html/template")),(0,i.kt)("li",{parentName:"ul"},"Sprig Function: ",(0,i.kt)("a",{parentName:"li",href:"http://masterminds.github.io/sprig/"},"http://masterminds.github.io/sprig/"))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"Env")," was removed in github-comment v6.0.0 for security."),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"Env: the function to get the environment variable ",(0,i.kt)("a",{parentName:"p",href:"https://golang.org/pkg/os/#Getenv"},"https://golang.org/pkg/os/#Getenv")))),(0,i.kt)("h2",{id:"exec"},"exec"),(0,i.kt)("p",null,"The configuration of ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," is little more difficult than ",(0,i.kt)("inlineCode",{parentName:"p"},"post"),", but the template key and ",(0,i.kt)("inlineCode",{parentName:"p"},"template")," is same as ",(0,i.kt)("inlineCode",{parentName:"p"},"post"),".\nThe each template is list which element has the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"template"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"dont_comment"),".\nThe attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," is evaluated by the evaluation engine  ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/antonmedv/expr"},"https://github.com/antonmedv/expr")," , and the result should be ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),".\nAbout expr, please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md"},"https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md")," too.\nWhen the evaluation result is ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," the element is ignored, and the first matching element is used.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"dont_comment")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the comment isn't created.\nIf no element matches, the comment isn't created without error."),(0,i.kt)("p",null,"In addition to the variables of ",(0,i.kt)("inlineCode",{parentName:"p"},"post")," command, the following variables can be used in ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"template")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Stdout: the command standard output"),(0,i.kt)("li",{parentName:"ul"},"Stderr: the command standard error output"),(0,i.kt)("li",{parentName:"ul"},"CombinedOutput: Stdout + Stderr"),(0,i.kt)("li",{parentName:"ul"},"Command: ",(0,i.kt)("a",{parentName:"li",href:"https://golang.org/pkg/os/exec/#Cmd.String"},"https://golang.org/pkg/os/exec/#Cmd.String")),(0,i.kt)("li",{parentName:"ul"},"JoinCommand: the string which the command and arguments are joined with the space character ",(0,i.kt)("inlineCode",{parentName:"li"}," ")),(0,i.kt)("li",{parentName:"ul"},"ExitCode: the command exit code")),(0,i.kt)("h2",{id:"define-reusable-template-components"},"Define reusable template components"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'templates:\n  <template name>: <template content>\npost:\n  default:\n    template: |\n      {{template "<template name>" .}} ...\n')),(0,i.kt)("h2",{id:"define-variables"},"Define variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"vars:\n  <variable name>: <variable value>\npost:\n  default:\n    template: |\n      {{.Vars.<variable name>}} ...\n")),(0,i.kt)("p",null,"The variable can be passed with the option ",(0,i.kt)("inlineCode",{parentName:"p"},"-var <variable name>:<variable value>")," too."),(0,i.kt)("p",null,"e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ github-comment post -var name:foo\n")))}s.isMDXComponent=!0}}]);