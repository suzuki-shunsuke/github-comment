"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[950],{5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},g=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,m=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,d=u["".concat(m,".").concat(c)]||u[c]||s[c]||l;return n?a.createElement(d,r(r({ref:t},g),{},{components:n})):a.createElement(d,r({ref:t},g))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7502:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>r,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(8168),i=(n(6540),n(5680));const l={sidebar_position:500},r="Configuration",o={unversionedId:"config",id:"config",title:"Configuration",description:"Configuration file path",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/github-comment/config",draft:!1,editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/config.md",tags:[],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/github-comment/usage"},next:{title:"Feature",permalink:"/github-comment/feature"}},m={},p=[{value:"Configuration file path",id:"configuration-file-path",level:2},{value:"Configuration file",id:"configuration-file",level:2},{value:"Environment variables",id:"environment-variables",level:2},{value:"Template Engine",id:"template-engine",level:2},{value:"Template Functions",id:"template-functions",level:2},{value:"Variables",id:"variables",level:2},{value:"post command",id:"post-command",level:3},{value:"exec command",id:"exec-command",level:3},{value:"exec",id:"exec",level:2},{value:"Define reusable template components",id:"define-reusable-template-components",level:2},{value:"Define variables",id:"define-variables",level:2},{value:"See also",id:"see-also",level:2}],g={toc:p},u="wrapper";function s(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"configuration"},"Configuration"),(0,i.yg)("h2",{id:"configuration-file-path"},"Configuration file path"),(0,i.yg)("p",null,"The configuration file path can be specified with the ",(0,i.yg)("inlineCode",{parentName:"p"},"--config (-c)")," option.\nIf the confgiuration file path isn't specified, the file named ",(0,i.yg)("inlineCode",{parentName:"p"},"^\\.?github-comment\\.ya?ml$")," would be searched from the current directory to the root directory."),(0,i.yg)("h2",{id:"configuration-file"},"Configuration file"),(0,i.yg)("p",null,"You can scaffold a configuration file by ",(0,i.yg)("inlineCode",{parentName:"p"},"github-comment init")," command."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sh"},"github-comment init\n")),(0,i.yg)("p",null,"e.g."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'hide:\n  default: |\n    Comment.HasMeta && Comment.Meta.SHA1 != Commit.SHA1 && ! (Comment.Meta.Program == "tfcmt" && Comment.Meta.Command == "apply")\npost:\n  tfmigrate-hcl-not-found:\n    template: |\n      ## :x: {{if .Vars.tfaction_target}}{{.Vars.tfaction_target}}: {{end}}.tfmigrate.hcl isn\'t found\n\n      {{template "link" .}}\n\n      To run `tfmigrate plan`, `.tfmigrate.hcl` is required.\n    template_for_too_long: |\n      comment is too long\nexec:\n  tfmigrate-plan:\n    - when: true\n      template: |\n        ## {{template "status" .}} {{if .Vars.tfaction_target}}{{.Vars.tfaction_target}}: {{end}} tfmigrate plan\n\n        {{template "link" .}}\n\n        {{template "join_command" .}}\n\n        {{template "hidden_combined_output" .}}\n      template_for_too_long: |\n        ## {{template "status" .}} {{if .Vars.tfaction_target}}{{.Vars.tfaction_target}}: {{end}} tfmigrate plan\n\n        {{template "link" .}}\n\n        {{template "join_command" .}}\n\n        Command output is omitted as it is too long.\n')),(0,i.yg)("h2",{id:"environment-variables"},"Environment variables"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"GITHUB_TOKEN, GITHUB_ACCESS_TOKEN"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_SKIP_NO_TOKEN, GITHUB_COMMENT_SKIP_NO_TOKEN"),(0,i.yg)("li",{parentName:"ul"},"GITHUB_COMMENT_SKIP"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_REPO_ORG"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_REPO_NAME"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_SHA1"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_CONFIG"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_PR_NUMBER, CI_INFO_PR_NUMBER"),(0,i.yg)("li",{parentName:"ul"},"GH_COMMENT_LOG_LEVEL"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"GH_COMMENT_VAR_*"))),(0,i.yg)("p",null,"Please see ",(0,i.yg)("a",{parentName:"p",href:"/github-comment/complement"},"Complement")," too."),(0,i.yg)("h2",{id:"template-engine"},"Template Engine"),(0,i.yg)("p",null,"Some fields such ",(0,i.yg)("inlineCode",{parentName:"p"},"template")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"template_for_too_long")," are rendered by ",(0,i.yg)("a",{parentName:"p",href:"https://pkg.go.dev/html/template"},"html/template"),"."),(0,i.yg)("h2",{id:"template-functions"},"Template Functions"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"http://masterminds.github.io/sprig/"},"sprig functions")," except for the following functions are available."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"expandenv, env, getHostByName"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"http://masterminds.github.io/sprig/os.html"},"os")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"http://masterminds.github.io/sprig/network.html"},"network"))),(0,i.yg)("p",null,"And the following custom functions are also available."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"AvoidHTMLEscape: Skip escaping HTML")),(0,i.yg)("p",null,"e.g."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"{{.CombinedOutput | AvoidHTMLEscape}}\n")),(0,i.yg)("h2",{id:"variables"},"Variables"),(0,i.yg)("h3",{id:"post-command"},"post command"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Org: GitHub Organization name"),(0,i.yg)("li",{parentName:"ul"},"Repo: GitHub Repository name"),(0,i.yg)("li",{parentName:"ul"},"PRNumber: Pull reuest number"),(0,i.yg)("li",{parentName:"ul"},"SHA1: Commit hash"),(0,i.yg)("li",{parentName:"ul"},"TemplateKey: Template key"),(0,i.yg)("li",{parentName:"ul"},"Vars: variables passed by ",(0,i.yg)("inlineCode",{parentName:"li"},"-var")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"-var-file"),", the config ",(0,i.yg)("inlineCode",{parentName:"li"},"vars"),", and the environment variables ",(0,i.yg)("inlineCode",{parentName:"li"},"GH_COMMENT_VAR_*"))),(0,i.yg)("h3",{id:"exec-command"},"exec command"),(0,i.yg)("p",null,"In addition to the variables of ",(0,i.yg)("inlineCode",{parentName:"p"},"post")," command, the following variables are available in ",(0,i.yg)("inlineCode",{parentName:"p"},"when")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"template"),"."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Stdout: the command standard output"),(0,i.yg)("li",{parentName:"ul"},"Stderr: the command standard error output"),(0,i.yg)("li",{parentName:"ul"},"CombinedOutput: Stdout + Stderr"),(0,i.yg)("li",{parentName:"ul"},"Command: ",(0,i.yg)("a",{parentName:"li",href:"https://golang.org/pkg/os/exec/#Cmd.String"},"https://golang.org/pkg/os/exec/#Cmd.String")),(0,i.yg)("li",{parentName:"ul"},"JoinCommand: the string which the command and arguments are joined with the space character ",(0,i.yg)("inlineCode",{parentName:"li"}," ")),(0,i.yg)("li",{parentName:"ul"},"ExitCode: the command exit code")),(0,i.yg)("h2",{id:"exec"},"exec"),(0,i.yg)("p",null,"The each template is list which element has the attribute ",(0,i.yg)("inlineCode",{parentName:"p"},"when")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"template"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"dont_comment"),".\nThe attribute ",(0,i.yg)("inlineCode",{parentName:"p"},"when")," is evaluated by the evaluation engine  ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/antonmedv/expr"},"https://github.com/antonmedv/expr")," , and the result should be ",(0,i.yg)("inlineCode",{parentName:"p"},"boolean"),".\nAbout expr, please see ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md"},"https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md")," too.\nWhen the evaluation result is ",(0,i.yg)("inlineCode",{parentName:"p"},"false")," the element is ignored, and the first matching element is used.\nIf ",(0,i.yg)("inlineCode",{parentName:"p"},"dont_comment")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),", the comment isn't created.\nIf no element matches, the comment isn't created without error."),(0,i.yg)("h2",{id:"define-reusable-template-components"},"Define reusable template components"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'templates:\n  <template name>: <template content>\npost:\n  default:\n    template: |\n      {{template "<template name>" .}} ...\n')),(0,i.yg)("h2",{id:"define-variables"},"Define variables"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"vars:\n  <variable name>: <variable value>\npost:\n  default:\n    template: |\n      {{.Vars.<variable name>}} ...\n")),(0,i.yg)("p",null,"The variable can be passed with the option ",(0,i.yg)("inlineCode",{parentName:"p"},"-var <variable name>:<variable value>")," too."),(0,i.yg)("p",null,"e.g."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ github-comment post -var name:foo\n")),(0,i.yg)("h2",{id:"see-also"},"See also"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/github-comment/builtin-template"},"Builtin Templates")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/github-comment/github-enterprise"},"GitHub Enterprise Support")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/github-comment/complement"},"Complement"))))}s.isMDXComponent=!0}}]);